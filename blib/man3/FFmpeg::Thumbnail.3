.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FFmpeg::Thumbnail 3"
.TH FFmpeg::Thumbnail 3 "2011-01-24" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
FFmpeg::Thumbnail \- Create a thumbnail from a video
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A wrapper for FFmpeg::Command specifically for creating video thumbnails.  Grabs a frame at
a specific point in the video and stores it as an image using ffmpeg ( <http://ffmpeg.org> ).
.PP
Provides the ability to set specific output paramaters, such as file-type and file size, and use them
across multiple video files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use FFmpeg::Thumbnail;
\&
\&    # Create a thumbnail 20 seconds into the video.
\&    my $foo = FFmpeg::Thumbnail\->new( { video => \*(Aq/my/video/file.flv\*(Aq } );
\&    my $offset = 20;
\&    my $output_filname = "/my/output/image.png";
\&    $foo\->create_thumbnail( $offset, $output_filename );
\&
\&
\&    # Create five evenly\-spaced jpeg\*(Aqs
\&    my $bar = FFmpeg::Thumbnail\->new( { video => \*(Aq/my/video/file.flv\*(Aq } );
\&    $bar\->file_format( \*(Aqmjpeg\*(Aq);
\&    my $filename( \*(Aq/my/default/filename_\*(Aq );
\&    my $num_thumbs = 5;
\&    for ( my $i=0; $i <= $bar\->duration; $i+=$bar\->duration / $num_thumbs ){
\&        $bar\->create_thumbnail( $i, $filename.$i."_.jpeg" );
\&    }
\&
\&
\&    # Create 640x480 thumbnails at 21 seconds for two separate videos
\&    my $baz = FFmpeg::Thumbnail\->new( { video => \*(Aq/my/video/file.flv\*(Aq } );
\&    $baz\->output_width( 640 );
\&    $baz\->output_height( 480 );
\&    $baz\->offset( 21 );
\&    $baz\->create_thumbnail( undef, \*(Aq/my/first/thumbnail.png\*(Aq);
\&
\&    $baz\->video( \*(Aq/my/video/second_file.flv\*(Aq );
\&    $baz\->create_thumbnail( undef, \*(Aq/my/second/thumbnail.png\*(Aq);
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "video"
.IX Subsection "video"
Complete path and filename for the source video.  It can be changed after instantiantion if you wish
to use the same output settings for different videos.
.SS "ffmpeg"
.IX Subsection "ffmpeg"
FFmpeg::Command object with handles to all of the FFmepg::Command methods. Automatically set
when the 'video' attribute is set.  (Readonly)
.SS "duration"
.IX Subsection "duration"
The length of the video, stored in seconds. It is automatically calculated and set from the 'ffmpeg'
attribue.
(Readonly)
.SS "filename"
.IX Subsection "filename"
Output filename. The filename extension, here, has no bearing on the actual output format.
That is set by the 'file_format' attribute, so it is possible to create a thumbnail named \*(L"thumbnail.jpg\*(R"
that actually has an 'image/png' \s-1MIME\s0 type.  Defaults to \*(L"/tmp/thumbnail.png\*(R"
.SS "default_offset"
.IX Subsection "default_offset"
The time in the video (in seconds) at which to grab the thumbnail
.SS "file_format"
.IX Subsection "file_format"
Ffmpeg output file format, used by the '\-f' argument. Defaults to 'image2' (png). 'mjpeg' (jpeg) is also known to work.
.SS "output_width"
.IX Subsection "output_width"
Width of the output thumnbail.  Default output image size is 320x240.
.SS "output_width"
.IX Subsection "output_width"
Height of the output thumbnail.  Default output image size is 320x240.
.SS "hide_log_output"
.IX Subsection "hide_log_output"
Turns off ffmpeg's log output.  You can still access this through the \fIstdout()\fR and
\&\fIstderr()\fR handles.  Log output is suppressed by default ( \->hide_log_output == 1 ).
.SH "METHODS"
.IX Header "METHODS"
.SS "create_thumbnail"
.IX Subsection "create_thumbnail"
Creats a thumbnail image using a specified offset and specified filename, or, if not specified, defaults. Will overwrite if a file already exists with that filename.
.PP
Usage:
.PP
.Vb 2
\&    # Create a thumbnail from $offset and store it at $output_filename:
\&    $foo\->create_thumbnail( $offset, $output_filename );
\&
\&    # Create a thumbnail from $offset and store it at the default location:
\&    $foo\->create_thumbnail( $offset );
\&
\&    # Create a thumbnail from the video\*(Aqs beginning and store it at $filename:
\&    $foo\->create_thumbnail( undef, $output_filename);
\&
\&    # Create a thumbnail from the video\*(Aqs beginning and store it at the default location:
\&    $foo\->create_thumbnail();
.Ve
.SS "_build_ffmpeg"
.IX Subsection "_build_ffmpeg"
Creats a new FFmpeg::Command object, sets \f(CW$self\fR\->video as the input_options, and executes to populate
\&\f(CW$self\fR\->ffmpeg\->stderr with the input video's meta data.
.SS "_build_duration"
.IX Subsection "_build_duration"
Builder for the \*(L"duration\*(R" attribute.  Reads the length of the video from \f(CW$self\fR\->ffmpeg\->stderr
and converts it seconds.
.PP
/Duration:\es+(\ed+):(\ed+):(\ed+)(?:\e.\ed+)?\es*,/
.SS "_reset"
.IX Subsection "_reset"
Clear the 'ffmpeg' and 'duration' attributes.
.SS "_validate_offset"
.IX Subsection "_validate_offset"
Checks \f(CW$offset\fR to make sure that it is numeric and <= \f(CW$self\fR\->duration.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Video::Framegrab" 4
.IX Item "Video::Framegrab"
A frame-grabber / thumbnail-creator built around mplayer.
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Sauls, \f(CW\*(C`<bbqsauls at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-video\-thumbnail at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Video\-Thumbnail <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Video-Thumbnail>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc FFmpeg::Thumbnail
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Video\-Thumbnail <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Video-Thumbnail>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Video\-Thumbnail <http://annocpan.org/dist/Video-Thumbnail>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Video\-Thumbnail <http://cpanratings.perl.org/d/Video-Thumbnail>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/Video\-Thumbnail/ <http://search.cpan.org/dist/Video-Thumbnail/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2011 Brian Sauls, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
